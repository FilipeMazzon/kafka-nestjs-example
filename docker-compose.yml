version: '3'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 12181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: zookeeper-1:2181:2181

  kafka:
    image: confluentinc/cp-kafka:latest
    hostname: kafka
    container_name: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: LISTENER_DOCKER_INTERNAL://:19092,LISTENER_DOCKER_EXTERNAL://:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka:19092,LISTENER_DOCKER_EXTERNAL://127.0.0.1:9092
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper


    postgres:
      image: postgres
      environment:
        POSTGRES_USER: ${POSTGRES_USER:-postgres}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
        PGDATA: /var/postgres
      volumes:
        - postgres:/data/postgres
        - ./dump.sql:/docker-entrypoint-initdb.d/dump.sql
      ports:
        - "5432:5432"
      restart: unless-stopped


  consumer:
    build:
      context: ./consumer
      dockerfile: Dockerfile
    ports:
      - '3000:3000'
    depends_on:
      - kafka
    volumes:
      - /app/node_modules
      - ./consumer:/app

  producer:
    build:
      context: ./producer
      dockerfile: Dockerfile
    ports:
      - '3001:3001'
    depends_on:
      - kafka
    volumes:
      - /app/node_modules
      - ./producer:/app
volumes:
  postgres:
